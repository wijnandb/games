const puzzles = [
'.................................................................................',
'4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......',
'52...6.........7.13...........4..8..6......5...........418.........3..2...87.....',
'6.....8.3.4.7.................5.4.7.3..2.....1.6.......2.....5.....8.6......1....',
'48.3............71.2.......7.5....6....2..8.............1.76...3.....4......5....',
'....14....3....2...7..........9...3.6.1.............8.2.....1.4....5.6.....7.8...',
'......52..8.4......3...9...5.1...6..2..7........3.....6...1..........7.4.......3.',
'6.2.5.........3.4..........43...8....1....2........7..5..27...........81...6.....',
'.524.........7.1..............8.2...3.....6...9.5.....1.6.3...........897........',
'6.2.5.........4.3..........43...8....1....2........7..5..27...........81...6.....',
'.923.........8.1...........1.7.4...........658.........6.5.2...4.....7.....9.....',
'6..3.2....5.....1..........7.26............543.........8.15........4.2........7..',
'.6.5.1.9.1...9..539....7....4.8...7.......5.8.817.5.3.....5.2............76..8...',
'..5...987.4..5...1..7......2...48....9.1.....6..2.....3..6..2.......9.7.......5..',
'3.6.7...........518.........1.4.5...7.....6.....2......2.....4.....8.3.....5.....',
'1.....3.8.7.4..............2.3.1...........958.........5.6...7.....8.2...4.......',
'6..3.2....4.....1..........7.26............543.........8.15........4.2........7..',
'....3..9....2....1.5.9..............1.2.8.4.6.8.5...2..75......4.1..6..3.....4.6.',
'45.....3....8.1....9...........5..9.2..7.....8.........1..4..........7.2...6..8..',
'.237....68...6.59.9.....7......4.97.3.7.96..2.........5..47.........2....8.......',
'..84...3....3.....9....157479...8........7..514.....2...9.6...2.5....4......9..56',
'.98.1....2......6.............3.2.5..84.........6.........4.8.93..5...........1..',
'..247..58..............1.4.....2...9528.9.4....9...1.........3.3....75..685..2...',
'4.....8.5.3..........7......2.....6.....5.4......1.......6.3.7.5..2.....1.9......',
'.2.3......63.....58.......15....9.3....7........1....8.879..26......6.7...6..7..4',
'1.....7.9.4...72..8.........7..1..6.3.......5.6..4..2.........8..53...7.7.2....46',
'4.....3.....8.2......7........1...8734.......6........5...6........1.4...82......',
'.......71.2.8........4.3...7...6..5....2..3..9........6...7.....8....4......5....',
'6..3.2....4.....8..........7.26............543.........8.15........8.2........7..',
'.47.8...1............6..7..6....357......5....1..6....28..4.....9.1...4.....2.69.',
'......8.17..2........5.6......7...5..1....3...8.......5......2..4..8....6...3....',
'38.6.......9.......2..3.51......5....3..1..6....4......17.5..8.......9.......7.32',
'...5...........5.697.....2...48.2...25.1...3..8..3.........4.7..13.5..9..2...31..',
'.2.......3.5.62..9.68...3...5..........64.8.2..47..9....3.....1.....6...17.43....',
'.8..4....3......1........2...5...4.69..1..8..2...........3.9....6....5.....2.....',
'..8.9.1...6.5...2......6....3.1.7.5.........9..4...3...5....2...7...3.8.2..7....4',
'4.....5.8.3..........7......2.....6.....5.8......1.......6.3.7.5..2.....1.8......',
'1.....3.8.6.4..............2.3.1...........958.........5.6...7.....8.2...4.......',
'1....6.8..64..........4...7....9.6...7.4..5..5...7.1...5....32.3....8...4........',
'249.6...3.3....2..8.......5.....6......2......1..4.82..9.5..7....4.....1.7...3...',
'...8....9.873...4.6..7.......85..97...........43..75.......3....3...145.4....2..1',
'...5.1....9....8...6.......4.1..........7..9........3.8.....1.5...2..4.....36....',
'......8.16..2........7.5......6...2..1....3...8.......2......7..3..8....5...4....',
'.476...5.8.3.....2.....9......8.5..6...1.....6.24......78...51...6....4..9...4..7',
'.....7.95.....1...86..2.....2..73..85......6...3..49..3.5...41724................',
'.4.5.....8...9..3..76.2.....146..........9..7.....36....1..4.5..6......3..71..2..',
'.834.........7..5...........4.1.8..........27...3.....2.6.5....5.....8........1..',
'..9.....3.....9...7.....5.6..65..4.....3......28......3..75.6..6...........12.3.8',
'.26.39......6....19.....7.......4..9.5....2....85.....3..2..9..4....762.........4',
'2.3.8....8..7...........1...6.5.7...4......3....1............82.5....6...1.......',
'6..3.2....1.....5..........7.26............843.........8.15........8.2........7..',
'1.....9...64..1.7..7..4.......3.....3.89..5....7....2.....6.7.9.....4.1....129.3.',
'.........9......84.623...5....6...453...1...6...9...7....1.....4.5..2....3.8....9',
'.2....5938..5..46.94..6...8..2.3.....6..8.73.7..2.........4.38..7....6..........5',
'9.4..5...25.6..1..31......8.7...9...4..26......147....7.......2...3..8.6.4.....9.',
'...52.....9...3..4......7...1.....4..8..453..6...1...87.2........8....32.4..8..1.',
'53..2.9...24.3..5...9..........1.827...7.........981.............64....91.2.5.43.',
'1....786...7..8.1.8..2....9........24...1......9..5...6.8..........5.9.......93.4',
'....5...11......7..6.....8......4.....9.1.3.....596.2..8..62..7..7......3.5.7.2..',
'.47.2....8....1....3....9.2.....5...6..81..5.....4.....7....3.4...9...1.4..27.8..',
'......94.....9...53....5.7..8.4..1..463...........7.8.8..7.....7......28.5.26....',
'.2......6....41.....78....1......7....37.....6..412....1..74..5..8.5..7......39..',
'1.....3.8.6.4..............2.3.1...........758.........7.5...6.....8.2...4.......',
'2....1.9..1..3.7..9..8...2.......85..6.4.........7...3.2.3...6....5.....1.9...2.5',
'..7..8.....6.2.3...3......9.1..5..6.....1.....7.9....2........4.83..4...26....51.',
'...36....85.......9.4..8........68.........17..9..45...1.5...6.4....9..2.....3...',
'34.6.......7.......2..8.57......5....7..1..2....4......36.2..1.......9.......7.82',
'......4.18..2........6.7......8...6..4....3...1.......6......2..5..1....7...3....',
'.4..5..67...1...4....2.....1..8..3........2...6...........4..5.3.....8..2........',
'.......4...2..4..1.7..5..9...3..7....4..6....6..1..8...2....1..85.9...6.....8...3',
'8..7....4.5....6............3.97...8....43..5....2.9....6......2...6...7.71..83.2',
'.8...4.5....7..3............1..85...6.....2......4....3.26............417........',
'....7..8...6...5...2...3.61.1...7..2..8..534.2..9.......2......58...6.3.4...1....',
'......8.16..2........7.5......6...2..1....3...8.......2......7..4..8....5...3....',
'.2..........6....3.74.8.........3..2.8..4..1.6..5.........1.78.5....9..........4.',
'.52..68.......7.2.......6....48..9..2..41......1.....8..61..38.....9...63..6..1.9',
'....1.78.5....9..........4..2..........6....3.74.8.........3..2.8..4..1.6..5.....',
'1.......3.6.3..7...7...5..121.7...9...7........8.1..2....8.64....9.2..6....4.....',
'4...7.1....19.46.5.....1......7....2..2.3....847..6....14...8.6.2....3..6...9....',
'......8.17..2........5.6......7...5..1....3...8.......5......2..3..8....6...4....',
'963......1....8......2.5....4.8......1....7......3..257......3...9.2.4.7......9..',
'15.3......7..4.2....4.72.....8.........9..1.8.1..8.79......38...........6....7423',
'..........5724...98....947...9..3...5..9..12...3.1.9...6....25....56.....7......6',
'....75....1..2.....4...3...5.....3.2...8...1.......6.....1..48.2........7........',
'6.....7.3.4.8.................5.4.8.7..2.....1.3.......2.....5.....7.9......1....',
'....6...4..6.3....1..4..5.77.....8.5...8.....6.8....9...2.9....4....32....97..1..',
'.32.....58..3.....9.428...1...4...39...6...5.....1.....2...67.8.....4....95....6.',
'...5.3.......6.7..5.8....1636..2.......4.1.......3...567....2.8..4.7.......2..5..',
'.5.3.7.4.1.........3.......5.8.3.61....8..5.9.6..1........4...6...6927....2...9..',
'..5..8..18......9.......78....4.....64....9......53..2.6.........138..5....9.714.',
'..........72.6.1....51...82.8...13..4.........37.9..1.....238..5.4..9.........79.',
'...658.....4......12............96.7...3..5....2.8...3..19..8..3.6.....4....473..',
'.2.3.......6..8.9.83.5........2...8.7.9..5........6..4.......1...1...4.22..7..8.9',
'.5..9....1.....6.....3.8.....8.4...9514.......3....2..........4.8...6..77..15..6.',
'.....2.......7...17..3...9.8..7......2.89.6...13..6....9..5.824.....891..........',
'3...8.......7....51..............36...2..4....7...........6.13..452...........8..',
'85...24..72......9..4.........1.7..23.5...9...4...........8..7..17..........36.4.',
'..53.....8......2..7..1.5..4....53...1..7...6..32...8..6.5....9..4....3......97..',
'12..4......5.69.1...9...5.........7.7...52.9..3......2.9.6...5.4..9..8.1..3...9.4',
'...57..3.1......2.7...234......8...4..7..4...49....6.5.42...3.....7..9....18.....',
'7..1523........92....3.....1....47.8.......6............9...5.6.4.9.7...8....6.1.',
'1....7.9..3..2...8..96..5....53..9...1..8...26....4...3......1..4......7..7...3..',
'1...34.8....8..5....4.6..21.18......3..1.2..6......81.52..7.9....6..9....9.64...2',
'...92......68.3...19..7...623..4.1....1...7....8.3..297...8..91...5.72......64...',
'.6.5.4.3.1...9...8.........9...5...6.4.6.2.7.7...4...5.........4...8...1.5.2.3.4.',
'7.....4...2..7..8...3..8.799..5..3...6..2..9...1.97..6...3..9...3..4..6...9..1.35',
'....7..2.8.......6.1.2.5...9.54....8.........3....85.1...3.2.8.4.......9.7..6....',
'2.659..475.4..2..1..7....8................19562...8.7.1.2.74.......1.........6...',
'4....5......1.3.9.....7.......5............6..537148...3.8...1.7.1...64.5.9.4..7.',
'.9.1....33..6...........45....3.....6..9.4.2.......6..42.59...88....2341.....82..',
'1....6....6...4.18.57......32.....67..4...3........8.1........547..5..2..3.2..14.',
'87....9.....5...12...73.45..32......4.1.2..9..9.....43......5...14....8.28..9....',
'.8.7.31.......9..6....12..4...478..1...1...6...3...8.79.....4.23...........967...',
'5..6....8.74.....3.6........3.....1...........9..1..4.6...37.81..9..8..5.534...6.',
'....23........4.....3.9.....8.24.1......76..82..1...7...4.89..396....48..1..6...2',
'5...1.76.1...9624....43.....4.........5.2....973.5....4......2..6.7.25.9.5..6....',
'...4..1.....7.........1....814.6...27....5...25..7..3653..2.481.8.3....7.2.....5.',
'.......7.........6.59..3...3..7..19.8.......2......6...8.67...9..62.5.38.2.1..7..',
'.1.7.9.62...1....96.2.4..5..........5....2..47...3..25.3..6....1.9......25..9.4.3',
'...2..54.7.4.6..929.5...31...2.3..5...7.......1.6.4........7.6....14...9...926...',
'56.....1.3..268................9..86.7......523........5...6.37..3....9.71...58..',
'95...7..83...8......7..1...5.3......81.4.5.....4.79.....5..2.84.3....12..2..9.7..',
'175....2...9127........4....9...14.3...253.........5..6..4....9.1.7.....7.36.5...',
'86......32...7.95...4.5.6............7...92....85...4.38.............78.5..4...92',
'3...9.87.57..2..1..4.....52.3...2....5.8..3..8.4..7.2.....81...4......3..297.....',
'..8.34..1.3.1.92.7.1...83..5..9.21.8..7.4.9..98...1.5.3.1..7.............4.......',
'3.....8.....4......4..721.6..6..4...8....3..515.8...3.7.......2......7.8215.....3',
'294...3..........753.........1.24..8..593.7..7.......9.4......1..9...8.58...4.2..',
'2.........36.5..4..9.....68..52....9.2....35.6.......29.....7...6...78.358.9...26',
'1.52..39.2.....7..3..54....7...........93..........2..6...2.5...4.1.697..13.576.2',
'61.54............4..89..3..8........956..8....4..1...632.8.....5....1..9..42.6...',
'...89..2..2...1.57..85.6.492.97......7148.........5..2.14.....58.2.......6.......',
'768.....4.........2.3....68..539.7...8.762..5.....5..3.......379.....852..4.....9',
'2.97...4.....9....6....8.3.....1.6.4.....9...7..683.......4..9......1783.68.7..2.',
'....3.1....6...9.2..4....6..2.....759.........7.1..3..3.96.4.5...2....4.1..9.5...',
'.34..617...7......16.......5.6.2.....7.43..9..9.1.7...41597.........1.....3.....2',
'2....7.8...74.1....8.9..3......2..5................97...83...2..93...84.17..5..3.',
'.8.2.37.1...6....86.7..529.85.1.9.2...17..5..2....6.........3...3.....1..1.......',
'....9.....4...7.98..9..21..3..8.4...9.1.254..2...71.5.1..2....4.....8..3...7.....',
'....9716.....3..7....4....2..3...21.9.5..6..3..235..4..3.7..6.1...2.9.......6.59.',
'...1...53...3.29....69..87..21.9.6..6.3.....9..8.1...2...7.5.3................5.8',
'6.8.1........5....4..9....5.1.5.3..47..6..89.....4....394..8....8.1.........74...',
'.8.5.2...749....8..23...1.....839...............41.2.9..7........5..89.193.7...48',
'58..6....4...9......3...48.83...1.....4539...6.........9.4.82......5.1....12.....',
'72.39.......25...9.89.....5....37....321.....8..4.....3.........9..4.81.1.87.25..',
'....2..................54.252..96....6.....754.3..1...6.1..9.2...24..39..7..1.64.',
'52..8.9.6...1..4........3.5...51...9...9.26...4...6..2...2.5....6.8.....2.4.3....',
'......52......1.....2...4316.48..157.......4...3.......271.......1..32.538.7....6',
'...5..6....1.....328.1......4.3.5.9...64.9.815....1...8..6......9...3...4.38.2...',
'...19...6.....58........9.1...6..4....1.5.....53.84.9..6..1...3...92.....14..86..',
'85.....4..3.8175....6......5....3.....32...7..7..61.241.........857....64.....7.8',
'.938.6...5.8..........2..5.162.9....43...5....8.2.......13....5...542...9....16.2',
'.45............2....831..5..3...7...1..6487.....2...4..5.47......15.2.....7.86.2.',
'.8.6....4.......93..3..7....61......5.....978.......4...9...85115..894..7......3.',
'.493...757...9.1.2...7.1.9.....4..2....1..3.......26.9...56...74......1......42.6',
'...82.....156.9...9..5...345.6...293........5......81.39.21..68........9...9.....',
'.9.....5.7...4..6.243.....9.5.9...........6...78........7..4...9..23.84.53.67..2.',
'97..3...413.4.......6........29.57.6.5.....41.1..7..3..6...7.....36........3...9.',
'...6....7.1........7..81.....47...39....29.1....3.8....974.3.....3.6.2.....8..4..',
'6....75..........3.8....96.......31..5...3..876........72..9...3...8.12...8.76...',
'....78.59.9.231.7...6..9.....5......3...8..1.768....35..7.......8..2..9.92......8',
'....673......1..4.....3...2..6.8.7...8...4.1...36....41....2.9...49....7...8..2..',
'..9....256...23..73.5...6....6.....41......7324.7......3.....1.5.4...7.6...4.....',
'..6.1..........82.73......16.13.9..4.9...2........4..7.24....8.1....7...87......3',
'..8.4....7........6.57.981..9.3.5.........9..5.79.....9...3.4..8...6179...1.....3',
'6....47..........1.7.......1..8...2..6..35...53...1.8.25.....1....4.....4.1.78.6.',
'47.9.5.61.......59...2..4........9.5......132..7.......14..63...9.3.....5...97..6',
'8..4.......6..1.......39.421..2..7.......6.....8.1......4.2....7..64.13...3.8....',
'.1....2.56......4..........4.952...38......2.3...81...9.6....5....2..39...23.48..',
'9.3...4.2...2...1.7..4....9..1...8....8....31.7......5...7....35...3..9..4.....5.',
'.71523.....3.1.........74...2..8.3.576............6.8.1....2..7.3.15............8',
'..1...6...4......75......98.148....975.....1...8.3.....37..49.....3...54.9.6..7.1',
'1....3..............29......1..7..8...8..24....951..3.8.5....7..2..3..59.93..1..8',
'9..72.8......4...7.7......6..8.9.2...3....4.............19....4.83.169....2.3..6.',
'.928.1..3....2.........6.1.7.8..3..9..1..5.2..26.7...8.......5.8..6.....2..3.....',
'..3..6.....64.58.7..58..2........5..9.7...........9.36.3......84.2.8.....5.2.....',
'.8..7...1....413.....6.......13...87.............57.6...7....48.....562..16..2...',
'.95....1.6....89...7.6.....2.8..65...5..92.7.....8...........4..4...5.619...4...7',
'.3.84..6..5.7...9...79..3.87..1.9....6..7....8.9..5...5.64..83.....3.........6...',
'..9.....6..6......73..9...26....8...1...62.34.24.3..67.8...31....7.2...3.1.....2.',
'936..1...7.........8.26.4....2.34.6....1...9.6.87..1...1.4..7....76............8.',
'.5.8........61..3.....95..8...571.8..........625..9.....6.2.71.28.13.65..3.......',
'2.6..5317..7.....8.58....6......3.7....1.9.569.1.8....3.9.............3...5...7.1',
'....7.1...7.....6.1..3..9.5.14.6............9..8...7.....815.9......6..3...9.3816',
'..7........8.5.......28......4..3.1.8....6.5...67...2..6....3..4.2..1..5..38..7..',
'..4.2..7653.1........6...5129......47.........4......2.....7.1.17.3.94..35...1...',
'1...5.....5.29..4.2.481.7.......6..8.7.1..2....25....68.......7.......5........19',
'....1...4.6...8.3..39..7.........8.......4..9..51..3..1.73......4..8.....93.46.87',
'..9....38....5.16.2..14.9.51..836......9......64.1...9...4.....8....5.....26.....',
'2.5...8..3.....976..81....5..9.6...76...5..1..7...........9......1..256......8.2.',
'49.....1732....9.....9...........371.35.4..6...6.7....1.......36....7.9....2..15.',
'....8..244.6.....9.2...961....9....3...4.2.61247.......89.......7...6.....2...3.6',
'.......5.5..........1..6..4.4.5.....72..41..69.6.2.........9.1...7.142...6....8..',
'67.4.....5.1............78....864.59.....34....8..9.6..3.798............9.46.1...',
'....1.............2.....431..4.5..2332....6.968...3.....1.98..2....32.16.....5.4.',
'6......1.8.7....36..5..1..753.....8...........78..2......1..46.1..3.5......72.3..',
'...5..43...3.....9617...........2...9..75............2..94...7.57.3..2....2.9.3.1',
'..52...7......13.2..3....9...63..729.........1..7.9..6.........6...37..5..9.65187',
'1.72....63..46......51...2.........5........9.23......5...7......4..91...9..3.45.',
'31.....4.....1.82...8..6...157...6..........3....6.58..46..1...7...8...5..2.5...7',
'......69.5.......3.....1...31...6..2..49.......9.32.....5684...4..3....1..8.152.6',
'1.......2..8...1...3....48..1.4..........6..5.9.3.........2.956..38.......6.5..2.',
'52..1..3..........6.482........57..82......1.817.......6......2...4....1.3..7264.',
'......2....397...6....42...6..7....48.4..6...1.....7.....6..32.....18...46..9.8..',
'39....8..4....91....8..........6.9.7..73...56..39...1...56.....8....1.7..14..7...',
'.2....6..1.9......78........9.5.2.1.....14.52...8..7..94..6....8.2..5....564..2..',
'..........98..7..137.98....6......2.....49.8...2.384..136.........413..8.........'
]

let sudokuGrid = [];

function createSudokuGrid(sudokuString) {
    sudokuString = sudokuString.replace(/\./g, '0');

    for (let i = 0; i < 9; i++) {
        const row = [];
        for (let j = 0; j < 9; j++) {
            const char = sudokuString.charAt(i * 9 + j);
            row.push(parseInt(char) || 0);
        }
        sudokuGrid.push(row);
    }
    return sudokuGrid;
}


function generateRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}


function getRandomPuzzle() {
    max = puzzles.length - 1;
    return generateRandomNumber(0, max);
}


// Function to display the Sudoku grid on the webpage
function displaySudoku() {

    const table = document.getElementById('sudoku');
    let tableHTML = '';
    for (let i = 0; i < 9; i++) {
        tableHTML += '<tr>';
        for (let j = 0; j < 9; j++) {
            if (sudokuGrid[i][j] === '.' || sudokuGrid[i][j] === 0) {
                tableHTML += '<td><input type="number" id="cell-' + i + '-' + j + '" min="1" max="9" onchange="updateGrid(' + i + ',' + j + ',parseInt(this.value))"> </td>';
            } else {
                tableHTML += '<td><strong>' + sudokuGrid[i][j] + '</strong></td>';
            }
        }
        tableHTML += '</tr>';
    }
    table.innerHTML = tableHTML;
}

function clearSudoku() {
    // Clear the HTML table
    const table = document.getElementById('sudoku');
    let tableHTML = '';
    for (let i = 0; i < 9; i++) {
        tableHTML += '<tr>';
        for (let j = 0; j < 9; j++) {
            tableHTML += '<td><input type="number" id="cell-' + i + '-' + j + '" min="1" max="9" onchange="updateGrid(' + i + ',' + j + ',this.value)"> </td>';
        }
        tableHTML += '</tr>';
    }
    table.innerHTML = tableHTML;
}


function isSafe(row, col, num) {
    if (num === '' || num === 0) {
        return true; // If num is empty or 0, return true
    }
    // Check if the number can be placed in the given row and column
    for (let i = 0; i < 9; i++) {
        if (sudokuGrid[row][i] === num || sudokuGrid[i][col] === num) {
            return false;
        }
    }

    // Check if the number can be placed in the 3x3 subgrid
    const startRow = Math.floor(row / 3) * 3;
    const startCol = Math.floor(col / 3) * 3;
    for (let i = startRow; i < startRow + 3; i++) {
        for (let j = startCol; j < startCol + 3; j++) {
            if (sudokuGrid[i][j] === num) {
                return false;
            }
        }
    }
    return true;
}


function solve() {
    for (let row = 0; row < 9; row++) {
        for (let col = 0; col < 9; col++) {
            if (sudokuGrid[row][col] === 0) {
                for (let num = 1; num <= 9; num++) {
                    if (isSafe(row, col, num)) {
                        sudokuGrid[row][col] = num;
                        if (solve()) {
                            return true; // If the current configuration leads to a solution
                        }
                        sudokuGrid[row][col] = 0; // If it doesn't lead to a solution, backtrack
                    }
                }
                return false; // If no number can be placed in this cell
            }
        }
    }
    return true; // If all cells are filled
}

function solveSudoku() {
    if (solve()) {
        // If a solution is found, update the grid on the webpage
        displaySudoku();
    } else {
        alert('Geen oplossing voor deze Sudoku.');
    }
}


function isGameComplete(board) {
    // Check for duplicates in rows, columns, and 3x3 boxes
    for (let i = 0; i < 9; i++) {
        const rowSet = new Set();
        const colSet = new Set();
        const boxSet = new Set();
        
        for (let j = 0; j < 9; j++) {
            // Check rows
            if (rowSet.has(board[i][j]) || colSet.has(board[j][i]) || boxSet.has(board[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + (j % 3)])) {
                return false; // Duplicate found
            }
            
            // Add values to sets for checking duplicates
            rowSet.add(board[i][j]);
            colSet.add(board[j][i]);
            boxSet.add(board[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + (j % 3)]);
        }
    }

    // Check if the puzzle is completely filled (no empty cells)
    for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
            if (board[i][j] === 0) {
                return false; // Puzzle is not complete
            }
        }
    }

    return true; // The puzzle is complete and correct
}

// Function to update the grid with user-inputted numbers
function updateGrid(row, col, value) {
    const cellElement = document.getElementById(`cell-${row}-${col}`);
    
    if (value === '') {
        // Clear the cell if the input is empty
        sudokuGrid[row][col] = 0;
        cellElement.value = ''; // Clear the input field
        cellElement.classList.remove('invalid'); // Remove the 'invalid' class
    } else if (!isNaN(value) && value >= 1 && value <= 9) {
        // Check if the input is a valid number between 1 and 9
        sudokuGrid[row][col] = parseInt(value);
        cellElement.value = value; // Update the input field with the new value
        console.log("valid move!")
    } else {
        // Invalid input, clear the cell
        sudokuGrid[row][col] = 0;
        cellElement.value = ''; // Clear the input field
        cellElement.classList.remove('invalid'); // Remove the 'invalid' class
    }

    if (isSafe(row, col, value)) {
        // Valid move
        cellElement.classList.remove('invalid'); // Remove the 'invalid' class
        if (isGameComplete(sudokuGrid)) {
            // Puzzle is complete, add the 'completed-puzzle' class to the table
            document.getElementById('sudoku').classList.add('completed-puzzle');
            alert('Gefeliciteerd! Je hebt de Sudoku opgelost.');
        }
    } else {
        // Invalid move
        cellElement.classList.add('invalid'); // Add the 'invalid' class
    }
}




// // Function to update the grid with user-inputted numbers
// function updateGrid(row, col, value) {
//     const cellElement = document.getElementById(`cell-${row}-${col}`);
//     if (isSafe(row, col, value)) {
//         sudokuGrid[row][col] = value;
//         cellElement.classList.remove('invalid'); // Remove the 'invalid' class
//         if (isGameComplete(sudokuGrid)) {
//             document.getElementById('sudoku').classList.add('completed-puzzle');
//             alert('Gefeliciteerd! Je hebt de Sudoku opgelost.');
//         }
//     } else {
//         cellElement.classList.add('invalid'); // Add the 'invalid' class
//     }
// }

function generateSudokuPuzzle(number) {
    sudokuGrid = [];
    // var puzzleIndex = getRandomPuzzle();
    // console.log(puzzleIndex)
    // var sudokuGrid = [];
    sudokuGrid = createSudokuGrid(puzzles[number]);
    console.log(sudokuGrid);
    displaySudoku()
}

function checkMove(row, col, value) {
    if (isSafe(row, col, value)) {
        alert('Geldige zet:'+row+','+col+','+value+'.');
        sudokuGrid[row][col] = value;
    } else {
        alert('Ongeldige zet.'+row+','+col+','+value+'.');
    }
}

